"""
Summary
-------

See Also
--------

"""

#********** Import major pakage or module **********
import os
import numpy as np
import cv2
import shutil

#********** Import original module **********
from phasepy._const import InputDataKey
from ._var_fmt import PathVal, SimuVal, PropVal, CellVal
from phasepy._const import MathConst, DirNam

#********** Constant Value **********
OUT_FILENAM = "data_"


def mk_outarr_list(output_parameter: dict) -> list:
    outarr_list = []
    for item in output_parameter:
        if output_parameter[item][InputDataKey.VALUE] == True:
            outarr_list.append(item)
    return outarr_list

class SaveTools():
    """
    Function about saving
    """
    @staticmethod
    def first_routine(path_val: PathVal, outimg_list: tuple, outarr_list: list) -> None:
        """
        This function is a routine of three functions

            1. Create output directory for files that must be output
            2. Creating a directory for output of files with specified output
            3. Saving Input Conditions
        
        Parameter
        ---------
        path_val: PathVal
            Variable about PATH
        outimg_list: list
            List of directory names must be output
                The list of arguments must be defined in "_const.py"
                in each simulation module.

                ex.) outimg_list = OUTIMG_LIST
                    (OUTIMG_LIST = [varA, modeA, dirnamA], [varB, modeB, dirnamB], ...) -> "_const.py"
        outbase_list: list
            List of directory names specified output
                This parameter is generated by "mk_outarr_list"
                
                ("mk_outarr_list" is written in < ~/phasepy/tools/_save.py >)
        """
        dir_list = []
        for var, mode, dirnam in outimg_list:
            dir_list.append(dirnam)

        # Create output directory for files that must be output
        _InternalTools.mk_outdir(path_val=path_val, dir_list=dir_list)
        # Creating a directory for output of files with specified output
        _InternalTools.mk_outdir(path_val=path_val, dir_list=outarr_list)
        # Saving Input Conditions
        _InternalTools.copy_inputfile(path_val=path_val)
        
    @staticmethod
    def save_img(path_val: PathVal, simu_val: SimuVal, prop_val: PropVal, cell_val: CellVal, outimg_list: tuple, step: int) -> None:
        for var, mode, dirnam in outimg_list:
            outimg = np.copy(getattr(cell_val, var))
            _InternalTools.save_img(path_val=path_val, simu_val=simu_val, prop_val=prop_val, outimg=outimg, dirnam=dirnam, step=step, mode=mode)

    @staticmethod
    def save_arr(path_val: PathVal, cell_val: CellVal, outarr_list: list, step: int) -> None:
        for var in outarr_list:
            outarr = np.copy(getattr(cell_val, var))
            _InternalTools.save_arr(path_val=path_val, outarr=outarr, dirnam=var, step=step)

class _InternalTools():
    """
    Internal function-tools about saving
    """
    @staticmethod
    def mk_outdir(path_val: PathVal, dir_list: list) -> None:
        """
        Generate directories according to listing
        
        Parameter
        ---------
        path_val: PathVal
            Variable about PATH
        dir_list: list
            List of directory names to be generated
        """
        for dirnam in dir_list:
            os.mkdir(os.path.join(path_val.output_path, dirnam))

    @staticmethod
    def copy_inputfile(path_val: PathVal) -> None:
        save_path = os.path.join(path_val.output_path, DirNam.INFO)
        os.mkdir(save_path)
        shutil.copy2(path_val.input_path, os.path.join(save_path, os.path.basename(path_val.input_path)))

    @staticmethod
    def save_img(path_val: PathVal, simu_val: SimuVal, prop_val: PropVal, outimg: np.ndarray, dirnam: str, step: int, mode: str) -> None:
        # Phase field variable (If variable is one)
        if mode == SaveImgMode.PHASE_ONE:
            data: np.ndarray = np.zeros((simu_val.xmax, simu_val.ymax, 3))
            data[:,:,0] = outimg*MathConst.WHITE_NUM
            data[:,:,1] = outimg*MathConst.WHITE_NUM
            data[:,:,2] = outimg*MathConst.WHITE_NUM
        # Phase field variable (If variable is two)
        elif mode == SaveImgMode.PHASE_TWO:
            data: np.ndarray = np.zeros((simu_val.xmax, simu_val.ymax, 3))
            data[:,:,0:2] = outimg*MathConst.WHITE_NUM
        # Magnetic moment        
        elif mode == SaveImgMode.MAGNETIC_MOMENT:
            data = (outimg+1.0)*MathConst.WHITE_NUM/2.0   
        # Temperture field
        elif mode == SaveImgMode.TEMPERTURE:
            data: np.ndarray = np.zeros((simu_val.xmax, simu_val.ymax, 3))
            data[:,:,0] = (prop_val.melt_tem-outimg)/(prop_val.melt_tem-prop_val.supercool_tem)*MathConst.WHITE_NUM
            data[:,:,1] = (prop_val.melt_tem-outimg)/(prop_val.melt_tem-prop_val.supercool_tem)*MathConst.WHITE_NUM
            data[:,:,2] = (prop_val.melt_tem-outimg)/(prop_val.melt_tem-prop_val.supercool_tem)*MathConst.WHITE_NUM
        else:
            raise AttributeError("< " + mode + " > is wrong mode. Maybe outimg_list is wrong.")

        filepath: str = os.path.join(path_val.output_path, dirnam, OUT_FILENAM + str(step) + ".png")
        cv2.imwrite(filepath, data)

    @staticmethod
    def save_arr(path_val: PathVal, outarr: np.ndarray, dirnam: str, step: int) -> None:
        if os.path.exists(os.path.join(path_val.output_path, dirnam))==False:
            os.mkdir(os.path.join(path_val.output_path, dirnam))
        filepath: str = os.path.join(path_val.output_path, dirnam, OUT_FILENAM + str(step) + ".npy")
        np.save(filepath, outarr)


class SaveImgMode():
    PHASE_ONE = "phase_one"
    """Phase field variable (If variable is one)"""
    PHASE_TWO = "phase_two"
    """Phase field variable (If variable is two)"""
    MAGNETIC_MOMENT = "magnetic_moment"
    """Magnetic moment"""
    TEMPERTURE = "temperture"
    """Temperture field"""